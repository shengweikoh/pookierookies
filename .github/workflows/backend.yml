# name: Spring Boot CI/CD

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       # Step 1: Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Step 2: Set up JDK
#       - name: Set up JDK
#         uses: actions/setup-java@v3
#         with:
#           java-version: '17'
#           distribution: 'temurin'

#       # Step 3: Cache Maven dependencies
#       - name: Cache Maven packages
#         uses: actions/cache@v3
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/backend/pom.xml') }}
#           restore-keys: |
#             ${{ runner.os }}-maven-

#       # Step 4: Decode and Create serviceAccountKey.json
#       - name: Decode serviceAccountKey.json
#         run: |
#           echo "${{ secrets.ENCODED_SERVICE_ACCOUNT_KEY }}" | base64 -d > backend/src/main/resources/serviceAccountKey.json
    
#       # Step 5: Build the application
#       - name: Build with Maven
#         working-directory: ./backend
#         run: mvn clean package

#       # Step 6: Build Docker image
#       - name: Build Docker image
#         working-directory: ./backend
#         run: docker build -t backend .

#       # Step 7: Push Docker image to Docker Hub
#       - name: Login to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}
#       - name: Push Docker image
#         working-directory: ./backend
#         run: |
#           docker tag backend ${{ secrets.DOCKER_USERNAME }}/backend:latest
#           docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

#       # Step 8: Deploy to AWS EC2 using SSM
#       - name: Deploy using AWS SSM
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: ${{ secrets.AWS_REGION }}
#         run: |
#           aws ssm send-command \
#             --document-name "AWS-RunShellScript" \
#             --targets "Key=instanceIds,Values=${{ secrets.INSTANCE_ID }}" \
#             --parameters 'commands=["docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest","docker stop backend || true","docker rm backend || true","docker run -d --name backend -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/backend:latest"]' \
#             --region ${{ secrets.AWS_REGION }}